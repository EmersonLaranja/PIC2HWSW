<!DOCTYPE html>
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/p5@1.1.9/lib/p5.min.js"></script>
    <script src="https://unpkg.com/ml5@0.5.0/dist/ml5.min.js"></script>
  </head>
  <%- include('./partials/head.ejs') %>
  <body class="page_display">
    <div class="main_content">
      <!-- <script src="https://cdn.jsdelivr.net/npm/p5@1.1.9/lib/p5.min.js"></script> -->
      <!-- <script src="https://unpkg.com/ml5@0.5.0/dist/ml5.min.js"></script> -->
      <div class="page_title"><h1 class="tcenter">Camera relay</h1></div>
      <div class="tcenter">
        <canvas id="canvas">
          Désolé, votre navigateur ne prend pas en charge &lt;canvas&gt;.
        </canvas>
      </div>
    </div>

    <script>
      let classifier; // Initialize the Image Classifier method with MobileNet and a callback needs to be passed.
      let resultsFromImage = [];

      function preload() {
        // classifier = ml5.imageClassifier('MobileNet');
        classifier = ml5.objectDetector("cocossd");
        // img = loadImage(
        //   "https://images-na.ssl-images-amazon.com/images/I/71+mDoHG4mL.png"
        // );
        // img = loadImage('https://c.tenor.com/4au2TL7vYXcAAAAC/vilnius-traffic.gif');
      }

      // function setup() {
      //   createCanvas(1920, 1080);
      //   classifier.classify(img, gotResult);

      //   image(img, 0, 0);
      // }

      function gotResult(error, results) {
        // Display error in the console
        if (error) {
          console.error(error);
        } else {
          // The results are in an array ordered by confidence.
          console.log(results);
          createDiv(`Label: ${results[0].label}`);
          createDiv(`Confidence: ${nf(results[0].confidence, 0, 2)}`);
        }
      }

      function draw() {
        image(img, 0, 0);

        for (let i = 0; i < resultsFromImage.length; i++) {
          let object = resultsFromImage[i];
          stroke(0, 255, 0);
          strokeWeight(4);
          noFill();
          rect(object.x, object.y, object.width, object.height);
          stroke(0, 0, 0);
          fill(255);
          textSize(24);
          text(object.label, object.x + 10, object.y + 25);
        }
      }

      var portStr = "";
      if (location.port != "") {
        portStr = ":" + location.port;
      }
      var protocolStr = "ws";
      if (location.protocol === "https:") {
        protocolStr = "wss";
      }
      // console.log(
      //   protocolStr + "://" + location.hostname + portStr + "/jpgstream_client"
      // );
      var ws = new WebSocket(
        protocolStr + "://" + location.hostname + portStr + "/jpgstream_client"
      );
      var canvas = document.getElementById("canvas");
      var ctx = canvas.getContext("2d");

      var img = new Image();
      img.onload = function () {
        canvas.style.width = this.width + "px";
        canvas.style.height = this.height + "px";
        ctx.drawImage(
          this,
          0,
          0,
          this.width,
          this.height, // source rectangle
          0,
          0,
          canvas.width,
          canvas.height
        ); // destination rectangle
      };

      ws.onmessage = function (message) {
        var url = URL.createObjectURL(message.data);
        img.src = url;
        console.log(url);
        gotResult();
        classifier.detect(img, resultsFromImage);
      };
    </script>
  </body>
</html>
